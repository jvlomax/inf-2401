   1: int mod (int x, int y){
Parser:   <program>
Parser:     <func decl>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <param decl>
   2:     return x - (x/y*y);
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <return-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </factor>
Parser:                   <term operator>
Parser:                   </term operator>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                             <factor operator>
Parser:                             </factor operator>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                             <factor operator>
Parser:                             </factor operator>
Parser:                             <operand>
Parser:                               <variable>
   3: }
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
   4: 
   5: int easter (int y){
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:             </return-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func decl>
Parser:     <func decl>
Parser:       <param decl>
   6:     int a; int b; int c; int d; int e; int f;
Parser:       </param decl>
Parser:       <func body>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
   7:     int g; int h; int i; int k; int l; int m;
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
   8:      
   9:     int month;
Parser:         </var decl>
Parser:         <var decl>
  10:     int m_name[5];
Parser:         </var decl>
Parser:         <var decl>
  11:     int day;
Parser:         </var decl>
Parser:         <var decl>
  12:     
  13:     int ix;
Parser:         </var decl>
Parser:         <var decl>
  14:     
  15:     a = mod(y,19); 
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  16:     b = y / 100;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                       <factor operator>
  17:     c = mod(y,100);
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  18:     d = b/4;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                       <factor operator>
  19:     e = mod(b,4);
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  20:     f = (b+8) / 25;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </operand>
Parser:                       <factor operator>
  21:     g = (b - f + 1) / 3;
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </operand>
Parser:                       <factor operator>
  22:     h = mod(19*a+b-d-g+15,30);
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                   <factor operator>
Parser:                                   </factor operator>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  23:     i = c / 4;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                       <factor operator>
  24:     k = mod(c, 4);
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  25:     l = mod(32+2*e+2*i-h-k, 7);
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                   <factor operator>
Parser:                                   </factor operator>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                   <factor operator>
Parser:                                   </factor operator>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
  26:     m = (a+11*h+22*1) /451;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                               <factor operator>
Parser:                               </factor operator>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                               <factor operator>
Parser:                               </factor operator>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </operand>
Parser:                       <factor operator>
  27:     
  28:     month = (h+1-(7*m)+114)/31;
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                       <factor operator>
Parser:                                       </factor operator>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </operand>
Parser:                             </factor>
Parser:                             <term operator>
Parser:                             </term operator>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </operand>
Parser:                       <factor operator>
  29:     day = mod(h+1 -(7*m)+114,31) + 1;
Parser:                       </factor operator>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <function call>
Parser:                           <expr list>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <operand>
Parser:                                             <number>
Parser:                                             </number>
Parser:                                           </operand>
Parser:                                           <factor operator>
Parser:                                           </factor operator>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                                 <term operator>
Parser:                                 </term operator>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </expr list>
Parser:                         </function call>
Parser:                       </operand>
Parser:                     </factor>
Parser:                     <term operator>
  30:     if (month == 3){
Parser:                     </term operator>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <if-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel operator>
Parser:                 </rel operator>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <number>
  31:         m_name[0] = 'M'; m_name[1] = 'a'; m_name[2] = 'r';
Parser:                       </number>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
  32:         m_name[3] = 'c'; m_name[4] = 'h';
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </variable>
  33:     }else{
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:               </statm list>
  34:         m_name[0] = 'A'; m_name[1] = 'p'; m_name[2] = 'r';
Parser:               <else-part>
Parser:                 <statm list>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
  35:         m_name[3] = 'i'; m_name[4] = 'l';
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
  36:     }
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
  37:     
  38:     putint(day); putchar(' ');
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                 </statm list>
Parser:               </else-part>
Parser:             </if-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <operand>
Parser:                           <number>
  39:     for (ix = 0; ix < 5; ix = ix + 1){
Parser:                           </number>
Parser:                         </operand>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <for-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel operator>
Parser:                 </rel operator>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <number>
Parser:                       </number>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </factor>
Parser:                     <term operator>
Parser:                     </term operator>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <number>
  40:         putchar(m_name[ix]);
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
  41:     }
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
  42: }
Parser:                     </function call>
  43: 
  44: int main(){
Parser:                   </call-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </for-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func decl>
Parser:     <func decl>
  45:     int y;
Parser:       <func body>
Parser:         <var decl>
  46:     for(y = 2010; y <= 2020; y = y+1){
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <for-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <variable>
Parser:                       </variable>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel operator>
Parser:                 </rel operator>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <operand>
Parser:                       <number>
Parser:                       </number>
Parser:                     </operand>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </factor>
Parser:                     <term operator>
Parser:                     </term operator>
Parser:                     <factor>
Parser:                       <operand>
Parser:                         <number>
  47:         easter(y); putchar(' ');
Parser:                         </number>
Parser:                       </operand>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
  48:         putint(y); putchar(10);
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <operand>
Parser:                                 <number>
  49:     }
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
  50: 
  51: }
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </for-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func decl>
Parser:   </program>
Tree:     int mod (int x, int y)
Tree:     {
Tree:       return x - (x / y * y);
Tree:     }
Tree:     
Tree:     int easter (int y)
Tree:     {
Tree:       int a;
Tree:       int b;
Tree:       int c;
Tree:       int d;
Tree:       int e;
Tree:       int f;
Tree:       int g;
Tree:       int h;
Tree:       int i;
Tree:       int k;
Tree:       int l;
Tree:       int m;
Tree:       int month;
Tree:       int m_name[5];
Tree:       int day;
Tree:       int ix;
Tree:     
Tree:       a = mod(y,19);
Tree:       b = y / 100;
Tree:       c = mod(y,100);
Tree:       d = b / 4;
Tree:       e = mod(b,4);
Tree:       f = (b + 8) / 25;
Tree:       g = (b - f + 1) / 3;
Tree:       h = mod(19 * a + b - d - g + 15,30);
Tree:       i = c / 4;
Tree:       k = mod(c,4);
Tree:       l = mod(32 + 2 * e + 2 * i - h - k,7);
Tree:       m = (a + 11 * h + 22 * 1) / 451;
Tree:       month = (h + 1 - (7 * m) + 114) / 31;
Tree:       day = mod(h + 1 - (7 * m) + 114,31) + 1;
Tree:       if (month == 3) {
Tree:         m_name[0] = 77;
Tree:         m_name[1] = 97;
Tree:         m_name[2] = 114;
Tree:         m_name[3] = 99;
Tree:         m_name[4] = 104;
Tree:       } else {
Tree:         m_name[0] = 65;
Tree:         m_name[1] = 112;
Tree:         m_name[2] = 114;
Tree:         m_name[3] = 105;
Tree:         m_name[4] = 108;
Tree:       }
Tree:       putint(day);
Tree:       putchar(32);
Tree:       for (ix = 0;  ix < 5;  ix = ix + 1) {
Tree:         putchar(m_name[ix]);
Tree:       }
Tree:     }
Tree:     
Tree:     int main ()
Tree:     {
Tree:       int y;
Tree:     
Tree:       for (y = 2010;  y <= 2020;  y = y + 1) {
Tree:         easter(y);
Tree:         putchar(32);
Tree:         putint(y);
Tree:         putchar(10);
Tree:       }
Tree:     }
